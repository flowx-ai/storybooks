(self.webpackChunkflowx_process_renderer_ui=self.webpackChunkflowx_process_renderer_ui||[]).push([[6796],{"./libs/ui-toolkit/angular/src/lib/form-controls/checkbox/checkbox.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,".flx-checkbox {\n  display: block;\n}\n\n.flx-checkbox-label {\n  display: flex;\n  align-items: center;\n  border-style: solid;\n  -webkit-user-select: none;\n          user-select: none;\n  cursor: pointer;\n  outline-color: transparent;\n  transition-property: border-color, background-color, outline-color, color;\n  transition-duration: 0.2s;\n  border-radius: var(--flxTheme-checkbox-borderRadius);\n  border-width: var(--flxTheme-checkbox-borderWidth);\n  font-family: var(--flxTheme-checkbox-fontFamily);\n  font-size: var(--flxTheme-checkbox-fontSize);\n  font-weight: var(--flxTheme-checkbox-fontWeight);\n  line-height: var(--flxTheme-checkbox-lineHeight);\n  gap: var(--flxTheme-checkbox-gap);\n  padding-top: var(--flxTheme-checkbox-paddingTop);\n  padding-right: var(--flxTheme-checkbox-paddingRight);\n  padding-bottom: var(--flxTheme-checkbox-paddingBottom);\n  padding-left: var(--flxTheme-checkbox-paddingLeft);\n  background-color: var(--flxTheme-checkbox-backgroundColor);\n  border-color: var(--flxTheme-checkbox-borderColor);\n  color: var(--flxTheme-checkbox-color);\n}\n.flx-checkbox-label input {\n  clip: rect(0 0 0 0);\n  position: absolute;\n  width: 0;\n  height: 0;\n  margin: 0;\n}\n.flx-checkbox-label .flx-checkbox-icon {\n  filter: brightness(0) saturate(100%) var(--flxTheme-checkbox-iconColor);\n}\n\n.flx-checkbox-container {\n  border-color: var(--flxTheme-checkbox-iconColor);\n  position: relative;\n  flex: 0 0 18px;\n  width: 18px;\n  height: 18px;\n  border-width: 2px;\n  border-style: solid;\n  border-radius: 4px;\n  transition: border-color 0.2s;\n}\n.flx-checkbox-container svg {\n  color: white;\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  transition: background-color 0.2s;\n  transition: opacity 0.1s;\n  opacity: 0;\n}\n\n.flx-checkbox-text {\n  flex-grow: 1;\n}\n\n.flx-checkbox-label.checked .flx-checkbox-container svg {\n  opacity: 1;\n}\n.flx-checkbox-label.checked .flx-icon {\n  background-color: var(--flxTheme-checkbox-iconColor);\n  transition: background-color 0.2s;\n}\n\n.flx-checkbox-label.focused {\n  outline-style: solid;\n}\n\n.flx-checkbox-label.disabled {\n  cursor: auto;\n}\n\n.flx-checkbox-clear .flx-checkbox-label {\n  border: none;\n  border-radius: 0;\n  padding: 0;\n  background: transparent;\n}\n\n.flx-checkbox-icons {\n  flex-grow: 0;\n  flex-shrink: 0;\n}\n\n.flx-checkbox-icons > div {\n  display: flex;\n  align-items: center;\n}",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/ui-toolkit/angular/src/lib/form-controls/checkbox/checkbox.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Checkbox:()=>Checkbox,__namedExportsOrder:()=>__namedExportsOrder,default:()=>checkbox_stories});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js"),http=__webpack_require__("./node_modules/@angular/common/fesm2022/http.mjs"),core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),fesm2022_forms=__webpack_require__("./node_modules/@angular/forms/fesm2022/forms.mjs"),dist=__webpack_require__("./node_modules/@storybook/angular/dist/index.mjs"),checkbox_componentngResource=__webpack_require__("./libs/ui-toolkit/angular/src/lib/form-controls/checkbox/checkbox.component.scss?ngResource"),checkbox_componentngResource_default=__webpack_require__.n(checkbox_componentngResource),icon_module=__webpack_require__("./libs/ui-toolkit/angular/src/lib/icon/icon.module.ts");let FlxCheckboxComponent=class FlxCheckboxComponent{constructor(){this.inputId=(0,core.input)(),this.name=(0,core.input)(),this.clear=(0,core.input)(),this.reversedLabel=(0,core.input)(),this.checked=(0,core.model)(!1),this.enabled=(0,core.input)(!0),this.disabled=(0,core.signal)(!1),this.focus=(0,core.signal)(!1),this.isDisabled=(0,core.computed)((()=>this.disabled()||!this.enabled()))}#onChange;#onTouched;onInputChange(ev){this.checked.set(ev.target.checked),this.#onChange?.(this.checked()),this.#onTouched?.()}onFocusChange(newFocus){this.focus.set(newFocus)}writeValue(value){this.checked.set(!!value)}registerOnChange(fn){this.#onChange=fn}registerOnTouched(fn){this.#onTouched=fn}setDisabledState(isDisabled){this.disabled.set(isDisabled)}static{this.propDecorators={inputId:[{type:core.Input,args:[{isSignal:!0,alias:"inputId",required:!1,transform:void 0}]}],name:[{type:core.Input,args:[{isSignal:!0,alias:"name",required:!1,transform:void 0}]}],clear:[{type:core.Input,args:[{isSignal:!0,alias:"clear",required:!1,transform:void 0}]}],reversedLabel:[{type:core.Input,args:[{isSignal:!0,alias:"reversedLabel",required:!1,transform:void 0}]}],checked:[{type:core.Input,args:[{isSignal:!0,alias:"checked",required:!1}]},{type:core.Output,args:["checkedChange"]}],enabled:[{type:core.Input,args:[{isSignal:!0,alias:"enabled",required:!1,transform:void 0}]}]}}};FlxCheckboxComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"flx-checkbox",imports:[icon_module.m],template:'<label\n    [attr.for]="inputId()"\n    [class.empty]="!checked()"\n    [class.checked]="checked()"\n    [class.disabled]="isDisabled()"\n    [class.focused]="focus()"\n    class="flx-checkbox-label"\n    flxCheckbox\n  >\n    <input\n      [id]="inputId()"\n      [checked]="checked()"\n      [disabled]="isDisabled()"\n      [attr.name]="name"\n      (change)="onInputChange($event)"\n      (focus)="onFocusChange(true)"\n      (blur)="onFocusChange(false)"\n      type="checkbox"\n    />\n\n    <div class="flx-checkbox-icons">\n      @if (checked()) {\n        <flx-icon-with-default\n          class="flx-checkbox-icon"\n          defaultName="checkboxChecked"\n        >\n          <ng-content select="[flxChoiceIconSelected]" />\n        </flx-icon-with-default>\n      } @else {\n        <flx-icon-with-default\n          class="flx-checkbox-icon"\n          defaultName="checkboxUnchecked"\n        >\n          <ng-content select="[flxChoiceIconUnselected]" />\n        </flx-icon-with-default>\n      }\n    </div>\n    <div class="flx-checkbox-text">\n      <ng-content></ng-content>\n    </div>\n  </label>',providers:[{provide:fesm2022_forms.kq,useExisting:FlxCheckboxComponent,multi:!0}],host:{class:"flx-checkbox","[class.flx-checkbox-clear]":"clear()","[class.flx-checkbox-reversed]":"reversedLabel()"},encapsulation:core.ViewEncapsulation.None,changeDetection:core.ChangeDetectionStrategy.OnPush,styles:[checkbox_componentngResource_default()]})],FlxCheckboxComponent);var choice_group_component=__webpack_require__("./libs/ui-toolkit/angular/src/lib/form-controls/choice-group/choice-group.component.ts"),form_utilities_module=__webpack_require__("./libs/ui-toolkit/angular/src/lib/form-controls/form-utilities.module.ts");let FlxCheckboxModule=class FlxCheckboxModule{};FlxCheckboxModule=(0,tslib_es6.Cg)([(0,core.NgModule)({imports:[FlxCheckboxComponent,choice_group_component.I,form_utilities_module.f],exports:[FlxCheckboxComponent,choice_group_component.I,form_utilities_module.f]})],FlxCheckboxModule);let CheckboxContainerComponent=class CheckboxContainerComponent{constructor(){this.form=new fesm2022_forms.gE({checks:new fesm2022_forms.Yp([new fesm2022_forms.MJ(!1),new fesm2022_forms.MJ(!1),new fesm2022_forms.MJ(!1)])}),this.options=["Option 1","Option 2","Option 3"]}get checks(){return this.form.get("checks")}get checksValue(){return this.checks.value.map(((v,i)=>v?this.options[i]:null)).filter((v=>!!v))}ngOnChanges(changes){changes.allRequiredError&&(changes.allRequiredError.currentValue?this.checks.controls.forEach((element=>{element.setValidators(fesm2022_forms.k0.requiredTrue)})):this.checks.controls.forEach((element=>{element.removeValidators(fesm2022_forms.k0.requiredTrue)}))),changes.disabledFirstOption&&(changes.disabledFirstOption.currentValue?this.form.controls.checks.get("0")?.disable():this.form.controls.checks.get("0")?.enable()),this.checks.updateValueAndValidity()}static{this.propDecorators={allRequiredError:[{type:core.Input}],disabledFirstOption:[{type:core.Input}],disabled:[{type:core.Input}],fontFamily:[{type:core.Input},{type:core.HostBinding,args:["style.fontFamily"]}]}}};CheckboxContainerComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"checkbox-container",standalone:!1,template:'\n    <form [formGroup]="form">\n      <flx-choice-group\n        [direction]="groupDirection"\n        [style.width]="width > 0 ? width + \'px\' : noBorder ? \'auto\' : \'100%\'"\n        formArrayName="checks"\n      >\n        <flx-label>\n          {{ label }}\n        </flx-label>\n        <flx-info-helper *ngIf="infoTooltip && helper">\n          {{ helper }}\n        </flx-info-helper>\n        <flx-checkbox\n          *ngFor="let option of options; let i = index"\n          [clear]="noBorder"\n          [reversedLabel]="reversedLabel"\n          [inputId]="radio + \'_\' + i"\n          [formControlName]="i"\n        >\n          {{ option }}\n        </flx-checkbox>\n        <flx-error *ngIf="checks.invalid">\n          {{ errorMessage }}\n        </flx-error>\n        <flx-helper *ngIf="!infoTooltip && helper && !checks.invalid">\n          {{ helper }}\n        </flx-helper>\n      </flx-choice-group>\n    </form>\n    <hr />\n    Selection : {{ checksValue | json }}\n  ',host:{"[class]":"'flx-default-theme'"}})],CheckboxContainerComponent);const checkbox_stories={title:"Form Controls/Choices/Checkbox",component:CheckboxContainerComponent,decorators:[(0,dist.moduleMetadata)({imports:[FlxCheckboxModule,fesm2022_forms.X1]}),(0,dist.applicationConfig)({providers:[(0,http.$R)(),(0,core.importProvidersFrom)(icon_module.m)]})],argTypes:{groupDirection:{options:["row","column"],control:{type:"select"}},fontFamily:{options:["Open Sans","Source Code Pro","Bitter"],control:{type:"select"}}}},Checkbox=(args=>({props:args})).bind({});Checkbox.args={fontFamily:"Open Sans",label:"Checkbox label",groupDirection:"row",noBorder:!1,reversedLabel:!1,width:0,disabledFirstOption:!1,allRequiredError:!1,errorMessage:"Error message",helper:"",infoTooltip:!1};const __namedExportsOrder=["Checkbox"];Checkbox.parameters={...Checkbox.parameters,docs:{...Checkbox.parameters?.docs,source:{originalSource:"(args: CheckboxContainerComponent) => ({\n  props: args\n})",...Checkbox.parameters?.docs?.source}}}}}]);