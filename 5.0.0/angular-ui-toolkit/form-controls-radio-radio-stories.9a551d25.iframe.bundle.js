(self.webpackChunkflowx_process_renderer_ui=self.webpackChunkflowx_process_renderer_ui||[]).push([[1876],{"./libs/ui-toolkit/angular/src/lib/form-controls/radio/radio.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,'.flx-radio {\n  display: block;\n}\n\n.flx-radio-label {\n  display: flex;\n  align-items: center;\n  border-style: solid;\n  -webkit-user-select: none;\n          user-select: none;\n  cursor: pointer;\n  outline-color: transparent;\n  transition-property: border-color, background-color, outline-color, color;\n  transition-duration: 0.2s;\n  border-radius: var(--flxTheme-radio-borderRadius);\n  border-width: var(--flxTheme-radio-borderWidth);\n  font-family: var(--flxTheme-radio-fontFamily);\n  font-size: var(--flxTheme-radio-fontSize);\n  font-weight: var(--flxTheme-radio-fontWeight);\n  line-height: var(--flxTheme-radio-lineHeight);\n  gap: var(--flxTheme-radio-gap);\n  padding-top: var(--flxTheme-radio-paddingTop);\n  padding-right: var(--flxTheme-radio-paddingRight);\n  padding-bottom: var(--flxTheme-radio-paddingBottom);\n  padding-left: var(--flxTheme-radio-paddingLeft);\n  background-color: var(--flxTheme-radio-backgroundColor);\n  border-color: var(--flxTheme-radio-borderColor);\n  color: var(--flxTheme-radio-color);\n}\n.flx-radio-label input {\n  clip: rect(0 0 0 0);\n  position: absolute;\n  width: 0;\n  height: 0;\n  margin: 0;\n}\n.flx-radio-label .flx-radio-icon {\n  filter: brightness(0) saturate(100%) var(--flxTheme-radio-iconColor);\n}\n\n.flx-radio-container {\n  border-color: var(--flxTheme-radio-iconColor);\n  position: relative;\n  width: 18px;\n  height: 18px;\n  flex: 0 0 18px;\n  border-width: 2px;\n  border-style: solid;\n  border-radius: 50%;\n  transition: border-color 0.2s;\n}\n.flx-radio-container::after {\n  background-color: var(--flxTheme-radio-iconColor);\n  content: "";\n  position: absolute;\n  top: 2px;\n  left: 2px;\n  width: 10px;\n  height: 10px;\n  border-radius: 50%;\n  transition: background-color 0.2s;\n  transition: transform 0.1s;\n  transform: scale3d(0, 0, 0);\n  transform-origin: center;\n}\n\n.flx-radio-text {\n  flex-grow: 1;\n}\n\n.flx-radio-label.checked .flx-radio-container::after {\n  transform: scale3d(1, 1, 1);\n}\n\n.flx-radio-label.focused {\n  outline-style: solid;\n}\n\n.flx-radio-label.disabled {\n  cursor: auto;\n}\n\n.flx-radio-clear .flx-radio-label {\n  border: none;\n  border-radius: 0;\n  padding: 0;\n  background: transparent;\n}\n\n.flx-radio-reversed .flx-radio-label {\n  flex-direction: row-reverse;\n}\n\n.flx-radio-icons {\n  flex-grow: 0;\n  flex-shrink: 0;\n}\n\n.flx-radio-icons > div {\n  display: flex;\n  align-items: center;\n}',""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/ui-toolkit/angular/src/lib/form-controls/radio/radio.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Radio:()=>Radio,__namedExportsOrder:()=>__namedExportsOrder,default:()=>radio_stories});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js"),http=__webpack_require__("./node_modules/@angular/common/fesm2022/http.mjs"),core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),fesm2022_forms=__webpack_require__("./node_modules/@angular/forms/fesm2022/forms.mjs"),dist=__webpack_require__("./node_modules/@storybook/angular/dist/index.mjs"),radio_componentngResource=__webpack_require__("./libs/ui-toolkit/angular/src/lib/form-controls/radio/radio.component.scss?ngResource"),radio_componentngResource_default=__webpack_require__.n(radio_componentngResource),icon_module=__webpack_require__("./libs/ui-toolkit/angular/src/lib/icon/icon.module.ts");let FlxRadioComponent=class FlxRadioComponent{constructor(){this.inputId=(0,core.input)(),this.name=(0,core.input)(),this.value=(0,core.input)(),this.clear=(0,core.input)(),this.checked=(0,core.model)(!1),this.enabled=(0,core.input)(!0),this.disabled=(0,core.signal)(!1),this.focus=(0,core.signal)(!1),this.isDisabled=(0,core.computed)((()=>this.disabled()||!this.enabled()))}#onChange;#onTouched;onInputChange(ev){this.checked.set(ev.target.checked),this.#onChange?.(ev.target.value),this.#onTouched?.()}onFocusChange(newFocus){this.focus.set(newFocus)}writeValue(obj){this.checked.set(obj===this.value())}registerOnChange(fn){this.#onChange=fn}registerOnTouched(fn){this.#onTouched=fn}setDisabledState(isDisabled){this.disabled.set(isDisabled)}static{this.propDecorators={inputId:[{type:core.Input,args:[{isSignal:!0,alias:"inputId",required:!1,transform:void 0}]}],name:[{type:core.Input,args:[{isSignal:!0,alias:"name",required:!1,transform:void 0}]}],value:[{type:core.Input,args:[{isSignal:!0,alias:"value",required:!1,transform:void 0}]}],clear:[{type:core.Input,args:[{isSignal:!0,alias:"clear",required:!1,transform:void 0}]}],checked:[{type:core.Input,args:[{isSignal:!0,alias:"checked",required:!1}]},{type:core.Output,args:["checkedChange"]}],enabled:[{type:core.Input,args:[{isSignal:!0,alias:"enabled",required:!1,transform:void 0}]}]}}};FlxRadioComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"flx-radio",imports:[icon_module.m],template:'<label\n    [attr.for]="inputId()"\n    [class.empty]="!checked()"\n    [class.checked]="checked()"\n    [class.disabled]="isDisabled()"\n    [class.focused]="focus()"\n    class="flx-radio-label"\n    flxRadio\n  >\n    <input\n      [id]="inputId()"\n      [value]="value()"\n      [checked]="checked()"\n      [disabled]="isDisabled()"\n      [attr.name]="name()"\n      (change)="onInputChange($event)"\n      (focus)="onFocusChange(true)"\n      (blur)="onFocusChange(false)"\n      type="radio"\n    />\n    <div class="flx-radio-icons">\n      @if (checked()) {\n        <flx-icon-with-default\n          class="flx-radio-icon"\n          defaultName="radioChecked"\n        >\n          <ng-content select="[flxChoiceIconSelected]" />\n        </flx-icon-with-default>\n      } @else {\n        <flx-icon-with-default\n          class="flx-radio-icon"\n          defaultName="radioUnchecked"\n        >\n          <ng-content select="[flxChoiceIconUnselected]" />\n        </flx-icon-with-default>\n      }\n    </div>\n    <div class="flx-radio-text">\n      <ng-content></ng-content>\n    </div>\n  </label>',providers:[{provide:fesm2022_forms.kq,useExisting:FlxRadioComponent,multi:!0}],host:{class:"flx-radio","[class.flx-radio-clear]":"clear()"},encapsulation:core.ViewEncapsulation.None,changeDetection:core.ChangeDetectionStrategy.OnPush,styles:[radio_componentngResource_default()]})],FlxRadioComponent);var choice_group_component=__webpack_require__("./libs/ui-toolkit/angular/src/lib/form-controls/choice-group/choice-group.component.ts"),form_utilities_module=__webpack_require__("./libs/ui-toolkit/angular/src/lib/form-controls/form-utilities.module.ts");let FlxRadioModule=class FlxRadioModule{};FlxRadioModule=(0,tslib_es6.Cg)([(0,core.NgModule)({imports:[FlxRadioComponent,choice_group_component.I,form_utilities_module.f],exports:[FlxRadioComponent,choice_group_component.I,form_utilities_module.f]})],FlxRadioModule);let RadioContainerComponent=class RadioContainerComponent{constructor(){this.fc=new fesm2022_forms.MJ("option1"),this.checked=!0}ngOnChanges(changes){changes.requiredError&&(changes.requiredError.currentValue?this.fc.setValidators(fesm2022_forms.k0.required):this.fc.removeValidators(fesm2022_forms.k0.required),this.fc.updateValueAndValidity()),changes.disabled&&(changes.disabled.currentValue?this.fc.disable():this.fc.enable())}static{this.propDecorators={requiredError:[{type:core.Input}],disabled:[{type:core.Input}],fontFamily:[{type:core.Input},{type:core.HostBinding,args:["style.fontFamily"]}]}}};RadioContainerComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"radio-container",standalone:!1,template:'\n    <flx-choice-group\n      [direction]="groupDirection"\n      [style.width]="width > 0 ? width + \'px\' : noBorder ? \'auto\' : \'100%\'"\n    >\n      <flx-label>\n        {{ label }}\n      </flx-label>\n      <flx-info-helper *ngIf="infoTooltip && helper">\n        {{ helper }}\n      </flx-info-helper>\n      <flx-radio\n        [formControl]="fc"\n        [checked]="fc.value === \'option1\'"\n        [clear]="noBorder"\n        name="test"\n        inputId="radio1"\n        value="option1"\n      >\n        Option 1\n        \x3c!-- <flx-icon\n          name="error"\n          flxChoiceIconSelected\n        />\n        <flx-icon\n          name="warning"\n          flxChoiceIconUnselected\n        /> --\x3e\n      </flx-radio>\n      <flx-radio\n        [formControl]="fc"\n        [checked]="fc.value === \'option2\'"\n        [clear]="noBorder"\n        name="test"\n        inputId="radio2"\n        value="option2"\n      >\n        Option 2\n      </flx-radio>\n      <flx-radio\n        [formControl]="fc"\n        [checked]="fc.value === \'option3\'"\n        [clear]="noBorder"\n        name="test"\n        inputId="radio3"\n        value="option3"\n      >\n        Option 3\n      </flx-radio>\n      <flx-error *ngIf="fc.errors">\n        {{ errorMessage }}\n      </flx-error>\n      <flx-helper *ngIf="!infoTooltip && helper && !fc.errors">\n        {{ helper }}\n      </flx-helper>\n    </flx-choice-group>\n    <hr />\n    Selected option : {{ fc.value | json }}\n  ',host:{"[class]":"'flx-default-theme'"}})],RadioContainerComponent);const radio_stories={title:"Form Controls/Choices/Radio",component:RadioContainerComponent,decorators:[(0,dist.moduleMetadata)({imports:[FlxRadioModule,fesm2022_forms.X1]}),(0,dist.applicationConfig)({providers:[(0,http.$R)(),(0,core.importProvidersFrom)(icon_module.m)]})],argTypes:{groupDirection:{options:["row","column"],control:{type:"select"}},fontFamily:{options:["Open Sans","Source Code Pro","Bitter"],control:{type:"select"}}}},Radio=(args=>({props:args})).bind({});Radio.args={fontFamily:"Open Sans",label:"Radio label",groupDirection:"row",noBorder:!1,width:0,disabled:!1,requiredError:!1,errorMessage:"Error message",helper:"",infoTooltip:!1};const __namedExportsOrder=["Radio"];Radio.parameters={...Radio.parameters,docs:{...Radio.parameters?.docs,source:{originalSource:"(args: RadioContainerComponent) => ({\n  props: args\n})",...Radio.parameters?.docs?.source}}}}}]);